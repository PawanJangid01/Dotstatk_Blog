name: CI-CD Deployment
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: self-hosted
    defaults:
      run:
        shell: pwsh -ExecutionPolicy Bypass
    steps:
      - name: Checkout repository
 
        uses: actions/checkout@v4
      - name: Setup .NET 8
 
        uses: actions/setup-dotnet@v4
 
        with:
 
          dotnet-version: '8.0.x'
      - name: Restore dependencies
 
        run: dotnet restore
      - name: Build project
 
        run: dotnet build --configuration Release --no-restore
      - name: Publish project
 
        run: dotnet publish -c Release -o ./publish
      - name: Backup current deployment
 
        shell: powershell
 
        run: |
 
          $source = "C:\inetpub\wwwroot\Blog_pepiline"
 
          if (Test-Path $source) {
 
            $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
 
          $backupDir = "C:\inetpub\wwwroot\Web_IIS_Blog\Backup_$timestamp"
 
            New-Item -ItemType Directory -Force -Path $backupDir | Out-Null
 
            Copy-Item -Path "$source\*" -Destination $backupDir -Recurse -Force
 
            Write-Host "Backup created at $backupDir"
 
          } else {
 
            Write-Host "No existing deployment found, skipping backup."
 
          }
      - name: Clean publish folder
 
        shell: powershell
 
        run: |
 
          $dest = "C:\inetpub\wwwroot\Blog_pepiline"
 
          Write-Host "=== Cleaning destination: $dest ==="
          # Kill processes that may lock DLLs
 
          $procs = "iisexpress","dotnet","w3wp"
 
          foreach ($p in $procs) {
 
              Get-Process $p -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
 
          }
          # Ensure folder exists
 
          if (-not (Test-Path $dest)) {
 
              Write-Host "Folder does not exist. Creating..."
 
              New-Item -ItemType Directory -Path $dest | Out-Null
 
          }
          # Remove ReadOnly attribute recursively
 
          Get-ChildItem -Path $dest -Recurse -Force -ErrorAction SilentlyContinue | ForEach-Object {
 
              if ($_.Attributes -band [System.IO.FileAttributes]::ReadOnly) {
 
                  $_.Attributes = 'Normal'
 
              }
 
          }
          # Retry deletion loop
 
          $maxRetries = 5
 
          for ($i = 0; $i -lt $maxRetries; $i++) {
 
              try {
 
                  if (Test-Path $dest) {
 
                      Write-Host "Attempting to delete folder (try $($i+1)/$maxRetries)..."
 
                      Remove-Item -LiteralPath $dest -Recurse -Force -ErrorAction Stop
 
                  }
 
                  break
 
              } catch {
 
                  Write-Host "Deletion attempt $($i+1) failed, retrying in 2 seconds..."
 
                  Start-Sleep -Seconds 2
 
              }
 
          }
          # Recreate clean folder
 
          if (-not (Test-Path $dest)) {
 
              Write-Host "Recreating clean destination folder..."
 
              New-Item -ItemType Directory -Path $dest | Out-Null
 
          }
          Write-Host "=== Cleanup completed successfully ==="
      - name: Copy new published files to destination
 
        shell: powershell
 
        run: |
 
          $source = "$env:GITHUB_WORKSPACE\publish"
 
          $dest = "C:\inetpub\wwwroot\Blog_pepiline"
 
          Copy-Item -Path "$source\*" -Destination $dest -Recurse -Force
 
          Write-Host "Files copied successfully."
      - name: Restart IIS site
 
        shell: powershell
 
        run: |
 
          Import-Module WebAdministration
 
          if (Get-Website -Name "DotStarkblog" -ErrorAction SilentlyContinue) {
 
            Restart-WebItem 'IIS:\Sites\DotStarkblog'
 
            Write-Host "Site 'DotStarkblog' restarted."
 
          } else {
 
            Write-Host "IIS site 'DotStarkblog' not found, please check if it exists in IIS Manager."
 
          }
