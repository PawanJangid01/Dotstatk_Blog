name: CI/CD to IIS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

env:
  PROJECT_PATH: Myblog.csproj     # your .csproj file name
  ARTIFACT_NAME: drop
  PUBLISH_DIR: publish
  IIS_SITE_PATH: C:\inetpub\wwwroot\Blog_pepiline
  IIS_APP_POOL: webblog

concurrency:
  group: prod-deploy
  cancel-in-progress: false

jobs:
  build:
    name: Build & Test
    runs-on: [self-hosted, windows, X64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore
        run: dotnet restore ${{ env.PROJECT_PATH }}

      - name: Build
        run: dotnet build ${{ env.PROJECT_PATH }} -c Release --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal

      - name: Publish
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -o ${{ env.PUBLISH_DIR }}

      # - name: Zip artifact
      #   run: |
      #     cd ${{ env.PUBLISH_DIR }}
      #     zip -r ../${{ env.ARTIFACT_NAME }}.zip .

      # - name: Upload artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{ env.ARTIFACT_NAME }}
      #     path: ${{ env.ARTIFACT_NAME }}.zip
      #     if-no-files-found: error

  deploy:
    name: Deploy to IIS (self-hosted)
    needs: build
    runs-on: [ self-hosted, windows, iis, prod ]

    steps:
      # - name: Download artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: ${{ env.ARTIFACT_NAME }}
      #     path: C:\deploy\incoming

      # - name: Unzip
      #   shell: pwsh
      #   run: |
      #     $zip = "C:\deploy\incoming\${{ env.ARTIFACT_NAME }}.zip"
      #     $release = "C:\deploy\staging\${{ github.run_number }}"
      #     New-Item -ItemType Directory -Force -Path $release | Out-Null
      #     Add-Type -AssemblyName System.IO.Compression.FileSystem
      #     [System.IO.Compression.ZipFile]::ExtractToDirectory($zip, $release, $true)

      - name: Deploy to IIS
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          Import-Module WebAdministration

          $sitePath  = "${{ env.IIS_SITE_PATH }}"
          $appPool   = "${{ env.IIS_APP_POOL }}"
          $source    = "C:\deploy\staging\${{ github.run_number }}"
          $timestamp = Get-Date -Format yyyyMMdd_HHmmss
          $backupDir = "C:\deploy\backups\${{ github.run_number }}_$timestamp"

          # Backup current site contents
          if (Test-Path $sitePath) {
            New-Item -ItemType Directory -Force -Path $backupDir | Out-Null
            robocopy $sitePath $backupDir /MIR /R:2 /W:2 | Out-Null
          }

          # Take app offline
          Stop-WebAppPool -Name $appPool
          Set-Content -Path (Join-Path $sitePath "app_offline.htm") -Value "Deployment in progress..."

          # Copy new files
          robocopy $source $sitePath /MIR /R:2 /W:2 /NFL /NDL /NP /XO | Out-Null

          # Bring app back
          if (Test-Path (Join-Path $sitePath "app_offline.htm")) { Remove-Item -Force (Join-Path $sitePath "app_offline.htm") }
          Start-WebAppPool -Name $appPool

      - name: Smoke test
        shell: pwsh
        run: |
          try {
            $resp = Invoke-WebRequest -Uri "http://localhost/" -UseBasicParsing -TimeoutSec 15
            if ($resp.StatusCode -lt 200 -or $resp.StatusCode -ge 400) { throw "Bad status $($resp.StatusCode)" }
          } catch {
            throw "Smoke test failed: $_"
          }
