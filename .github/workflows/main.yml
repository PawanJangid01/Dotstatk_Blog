name: CI-CD Deployment

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        shell: powershell
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          dotnet restore

      - name: Build project
        shell: powershell
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          dotnet build --configuration Release --no-restore

      - name: Publish project
        shell: powershell
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          dotnet publish -c Release -o ./publish

      - name: Backup current deployment
        shell: powershell
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          $source = "C:\inetpub\wwwroot\Blog_pepiline"
          if (Test-Path $source) {
            $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
            $backupDir = "C:\inetpub\wwwroot\Web_IIS_Blog\Backup_$timestamp"
            New-Item -ItemType Directory -Force -Path $backupDir | Out-Null
            Copy-Item -Path "$source\*" -Destination $backupDir -Recurse -Force
            Write-Host "Backup created at $backupDir"
          } else {
            Write-Host "No existing deployment found, skipping backup."
          }

      - name: Clean publish folder
        shell: powershell
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          $dest = "C:\inetpub\wwwroot\Blog_pepiline"
          Write-Host "=== Cleaning destination: $dest ==="

          # Kill processes that may lock DLLs
          $procs = "iisexpress","dotnet","w3wp"
          foreach ($p in $procs) {
              Get-Process $p -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
          }

          # Ensure folder exists
          if (-not (Test-Path $dest)) {
              Write-Host "Folder does not exist. Creating..."
              New-Item -ItemType Directory -Path $dest | Out-Null
          }

          # Remove ReadOnly attribute recursively
          Get-ChildItem -Path $dest -Recurse -Force -ErrorAction SilentlyContinue | ForEach-Object {
              if ($_.Attributes -band [System.IO.FileAttributes]::ReadOnly) {
                  $_.Attributes = 'Normal'
              }
          }

          # Retry deletion loop
          $maxRetries = 5
          for ($i = 0; $i -lt $maxRetries; $i++) {
              try {
                  if (Test-Path $d
